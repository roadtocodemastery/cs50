#include <cs50.h>
#include <stdio.h>
#include <string.h>

// Max number of candidates
#define MAX 9

// preferences[i][j] is number of voters who prefer i over j
int preferences[MAX][MAX];

// locked[i][j] means i is locked in over j
bool locked[MAX][MAX];

// Each pair has a winner, loser
typedef struct
{
    int winner;
    int loser;
} pair;

// Array of candidates
string candidates[MAX];
pair pairs[MAX * (MAX - 1) / 2];

int pair_count;
int candidate_count;

// Function prototypes
bool vote(int rank, string name, int ranks[]);
void record_preferences(int ranks[]);
void add_pairs(void);
void sort_pairs(void);
void lock_pairs(void);
void print_winner(void);

int main(int argc, string argv[])
{
    // Check for invalid usage
    if (argc < 2)
    {
        printf("Usage: tideman [candidate ...]\n");
        return 1;
    }

    // Populate array of candidates
    candidate_count = argc - 1;
    if (candidate_count > MAX)
    {
        printf("Maximum number of candidates is %i\n", MAX);
        return 2;
    }
    for (int i = 0; i < candidate_count; i++)
    {
        candidates[i] = argv[i + 1];
    }

    // Clear graph of locked in pairs
    for (int i = 0; i < candidate_count; i++)
    {
        for (int j = 0; j < candidate_count; j++)
        {
            locked[i][j] = false;
        }
    }

    pair_count = 0;
    int voter_count = get_int("Number of voters: ");

    // Query for votes
    for (int i = 0; i < voter_count; i++)
    {
        // ranks[i] is voter's ith preference
        int ranks[candidate_count];

        // Query for each rank
        for (int j = 0; j < candidate_count; j++)
        {
            string name = get_string("Rank %i: ", j + 1);

            if (!vote(j, name, ranks))
            {
                printf("Invalid vote.\n");
                return 3;
            }
        }

        record_preferences(ranks);

        printf("\n");
    }

    add_pairs();
    sort_pairs();
    lock_pairs();
    print_winner();
    return 0;
}

// Update ranks given a new vote
bool vote(int rank, string name, int ranks[])
{

    // Iterate over array of candidates and look for name
    for (int i = 0; i < candidate_count; i++)
    {
        if (strcmp(name, candidates[i]) == 0)
        {

            // Update ranks array for rank preference
            ranks[rank] = i;
            return true;
        }
    }
    return false;
}

// Update preferences given one voter's ranks
void record_preferences(int ranks[])
{
    //
    int rank_i_in_candidates;
    int rank_j_in_candidates;
    for (int i = 0; i < (candidate_count - 1); i++)
    {
        for (int c = 0; c < candidate_count; c++)
        {
            if (strcmp(candidates[ranks[i]], candidates[c]) == 0)
            {
                rank_i_in_candidates = c;
            }
        }
        for (int j = i + 1; j < candidate_count; j++)
        {
            for (int d = 0; d < candidate_count; d++)
            {
                if (strcmp(candidates[ranks[j]], candidates[d]) == 0)
                {
                    rank_j_in_candidates = d;
                }
            }
            preferences[rank_i_in_candidates][rank_j_in_candidates] += 1;
        }
    }
    return;
}

// Record pairs of candidates where one is preferred over the other
void add_pairs(void)
{
    // TODO
    for (int i = 0; i < (candidate_count - 1); i++)
    {
        for (int j = i + 1; j < candidate_count; j++)
        {
            if (preferences[i][j] > preferences[j][i])
            {
                pairs[pair_count].winner = i;
                pairs[pair_count].loser = j;
                pair_count++;
            } else if (preferences[i][j] < preferences[j][i])
            {
                pairs[pair_count].winner = j;
                pairs[pair_count].loser = i;
                pair_count++;
            }
        }
    }
    return;
}

// Sort pairs in decreasing order by strength of victory
void sort_pairs(void)
{
    for (int i = 0; i < pair_count; i++)
    {
        int min_value = MAX + 1;
        for (int j = i; j < pair_count; j++)
        {
            if (min_value == MAX + 1)
            {
                min_value = preferences[pairs[j].winner][pairs[j].loser];
            }

            if (preferences[pairs[j].winner][pairs[j].loser] < min_value)
            {
                min_value = preferences[pairs[j].winner][pairs[j].loser];

                pair placeholder_pairs_j;
                placeholder_pairs_j.winner = pairs[j].winner;
                placeholder_pairs_j.loser = pairs[j].loser;

                pairs[j].winner = pairs[i].winner;
                pairs[j].loser = pairs[i].loser;

                pairs[i].winner = placeholder_pairs_j.winner;
                pairs[i].loser = placeholder_pairs_j.loser;
            }
        }
    }

    pair pairs_placeholder;

    for (int i = 0; i < (pair_count / 2); i++)
    {
        if (i + 0.5 != (pair_count / 2))
        {
            pairs_placeholder.winner = pairs[pair_count - 1 - i].winner;
            pairs_placeholder.loser = pairs[pair_count - 1 - i].loser;

            pairs[pair_count - 1 - i].winner = pairs[i].winner;
            pairs[pair_count - 1 - i].loser = pairs[i].loser;

            pairs[i].winner = pairs_placeholder.winner;
            pairs[i].loser = pairs_placeholder.loser;
        }
    }

    return;
}

// Lock pairs into the candidate graph in order, without creating cycles
void lock_pairs(void)
{
    bool lock_pairs_copy[MAX][MAX];


    for (int i = 0; i < candidate_count; i++)
    {
        for (int j = 0; j < candidate_count; j++)
        {
            if (i == j)
            {
                lock_pairs_copy[i][j] = false;
            } else
            {
                lock_pairs_copy[i][j] = true;
            }
        }
    }

    for (int i = 0; i < candidate_count; i++)
    {
        for (int j = 0; j < candidate_count; j++)
        {
            if (i == j)
            {
                locked[i][j] = false;
            } else
            {
                locked[i][j] = false;
            }
        }
    }

    for (int i = 0; i < pair_count; i++)
    {
        bool placeholder_one = lock_pairs_copy[pairs[i].winner][pairs[i].loser];
        bool placeholder_two = lock_pairs_copy[pairs[i].loser][pairs[i].winner];

        lock_pairs_copy[pairs[i].winner][pairs[i].loser] = true;
        lock_pairs_copy[pairs[i].loser][pairs[i].winner] = false;

        // Todo: Iterate over each line and count the false
        int sources_count = 0;
        for (int j = 0; j < candidate_count; j++)
        {
            int false_count = 0;
            for (int k = 0; k < candidate_count; k++)
            {
                if (lock_pairs_copy[j][k] == false)
                {
                    false_count++;
                }
            }
            if (false_count == 1)
            {
                sources_count++;
            }
        }
        if (sources_count != 0)
        {
            locked[pairs[i].winner][pairs[i].loser] = true;
            locked[pairs[i].loser][pairs[i].winner] = false;
        } else
        {
            lock_pairs_copy[pairs[i].winner][pairs[i].loser] = placeholder_one;
            lock_pairs_copy[pairs[i].loser][pairs[i].winner] = placeholder_two;
        }
    }
    return;
}

// Print the winner of the election
void print_winner(void)
{
    int tie_check = 1;
    int victory_strength_check = 0;
    for (int i = 0; i < pair_count; i++)
    {
        if (i == 0)
        {
            victory_strength_check = preferences[pairs[i].winner][pairs[i].loser];
        }
        if (preferences[pairs[i].winner][pairs[i].loser] == victory_strength_check)
        {
            tie_check++;
        }
    }
    if (pair_count == candidate_count && tie_check == pair_count)
    {
        printf("Tie\n");
        return;
    }
    int source;
        for (int j = 0; j < candidate_count; j++)
        {
            int false_count = 0;
            for (int k = 0; k < candidate_count; k++)
            {
                if (locked[j][k] == false)
                {
                    false_count++;
                }
            }
            if (false_count == 1)
            {
                source = j;
            }
        }
    printf("%s\n",candidates[source]);
    return;
}
